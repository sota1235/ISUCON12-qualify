AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation for ISUCON12 Environment Checks
Resources:
  GetAvailabilityZoneFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: GetAvailabilityZoneFunctionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeAvailabilityZones
                Resource: "*"
  GetAvailabilityZoneFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import cfnresponse
          import boto3
          def handler(event, context):
            if event['RequestType'] == "Create":
              ec2 = boto3.client('ec2')
              response = ec2.describe_availability_zones(
                ZoneIds = ['apne1-az1']
              )
              ZoneName = response['AvailabilityZones'][0]['ZoneName']
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {"ZoneName" : ZoneName})
            elif event['RequestType'] == "Update":
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
            elif event['RequestType'] == "Delete":
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
      Handler: index.handler
      Runtime: python3.9
      Timeout: 30
      Role: !GetAtt GetAvailabilityZoneFunctionExecutionRole.Arn
  GetAvailabilityZone:
    Type: Custom::PythonLambdaExecution
    Properties:
      ServiceToken: !GetAtt GetAvailabilityZoneFunction.Arn

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "192.168.0.0/16"
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      InstanceTenancy: default
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !GetAtt GetAvailabilityZone.ZoneName
      CidrBlock: "192.168.0.0/24"
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: False
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway
  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet
      RouteTableId: !Ref RouteTable
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: "0.0.0.0/0"

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: IsuconEC2InstancePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeVolumes
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeAvailabilityZones
                Resource: "*"
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref InstanceRole

  EnvcheckInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0818d90e95fcec665
      InstanceType: t3.micro
      SecurityGroupIds:
        - !Ref SecurityGroup
      SubnetId: !Ref Subnet
      IamInstanceProfile:
        !Ref InstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 8
            VolumeType: gp2
      Tags:
        - Key: Name
          Value: isucon12-envcheck
      UserData:
        Fn::Base64: |
          #cloud-config
          write_files:
          - path: /opt/isucon-env-checker/portal_credentials.json
            owner: root:root
            permissions: '0644'
            encoding: b64
            content: 'eyJ0b2tlbiI6InJwZk94S3pmYkhmMURpN3JPSS1mSThreG9WN3dfNXl5UjlaWEpuZHZ0cVZSMmRoQkNjTTBXLVU0UEFCcFhZeEY6ZXlKMFpXRnRYMmxrSWpvM01ESXNJbVY0Y0dseWVTSTZNVFkxT0RVek9EQXdNSDAiLCJkZXYiOmZhbHNlLCJob3N0IjoicG9ydGFsLmlzdWNvbi5uZXQifQ=='
          runcmd:
            - 'curl --retry 5 --retry-connrefused --max-time 10 --connect-timeout 5 "https://portal.isucon.net/api/ssh_public_keys?token=rpfOxKzfbHf1Di7rOI-fI8kxoV7w_5yyR9ZXJndvtqVR2dhBCcM0W-U4PABpXYxF:eyJ0ZWFtX2lkIjo3MDIsImV4cGlyeSI6MTY1ODUzODAwMH0" | sudo -u isucon sh -c "umask 077; cat > /home/isucon/.ssh/authorized_keys"'
  EnvcheckInstanceIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref EnvcheckInstance
